// Program.cs (top of file)
// Purpose: Configure services (DI) and HTTP request pipeline (middleware) for the API.
using Microsoft.EntityFrameworkCore;        // EF Core provider APIs
using Notes.Api.Data;                       // Our AppDb DbContext
using System.Reflection;                    // Required for XML documentation path

var builder = WebApplication.CreateBuilder(args);

// Register the EF Core DbContext. It tells EF to use SQLite and pull the connection string
// named "Default" from appsettings.json.
builder.Services.AddDbContext<AppDb>(options =>
    options.UseSqlite(builder.Configuration.GetConnectionString("Default")));

// Add services to the container.
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    // Basic API metadata
    c.SwaggerDoc("v1", new() { Title = "Notes API", Version = "v1" });

    // Include XML documentation generated by the compiler
    var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
    c.IncludeXmlComments(xmlPath, includeControllerXmlComments: true);

    c.EnableAnnotations();
});

// ===== CORS configuration =====
// CORS (Cross-Origin Resource Sharing) allows our backend to accept requests
// from a different origin (e.g. our frontend running on another port).
// Without this, the browser will block frontend â†’ backend requests.
var AllowFrontend = "_allowFrontend";

builder.Services.AddCors(options =>
{
    options.AddPolicy(name: AllowFrontend, policy =>
    {
        policy
            // List all frontend URLs that should be allowed to call this API.
            // You can add or remove entries depending on how you start your frontend.
            .WithOrigins(
                "http://localhost:5173", // common for Vite
                "http://localhost:5500", // common for VS Code Live Server
                "http://127.0.0.1:5500", // Live Server alternative
                "http://localhost:8000"  // simple Python/Node static server
            )
            .AllowAnyHeader() // allow all HTTP headers (e.g. Content-Type, Authorization)
            .AllowAnyMethod(); // allow all HTTP methods (GET, POST, PUT, DELETE)
    });
});

var app = builder.Build();

// ===== Enable CORS middleware =====
// Activates the CORS policy we registered above (AllowFrontend).
// Place it early so all following endpoints inherit CORS behavior.
app.UseCors(AllowFrontend);

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    // Swagger/OpenAPI UI is only exposed in Development by default.
    app.MapControllers(); // (keine Sorge, lassen wir vorerst so)
    app.UseSwagger();
    app.UseSwaggerUI();
}

// Map attribute-routed controllers (e.g., [Route("api/[controller]")]).
app.MapControllers();

// Optional: Redirect the root "/" to Swagger UI for convenience.
app.MapGet("/", () => Results.Redirect("/swagger"));

var summaries = new[]
{
    "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
};

app.MapGet("/weatherforecast", () =>
{
    var forecast =  Enumerable.Range(1, 5).Select(index =>
        new WeatherForecast
        (
            DateOnly.FromDateTime(DateTime.Now.AddDays(index)),
            Random.Shared.Next(-20, 55),
            summaries[Random.Shared.Next(summaries.Length)]
        ))
        .ToArray();
    return forecast;
})
.WithName("GetWeatherForecast")
.WithOpenApi();

app.Run();


record WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)
{
    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
}
